# To build this image:
# docker build -f docker/Dockerfile.web -t matchub-web-angular-image .
    # -f: indicates dockerfile name
    # -t: indicates a tag to identify the image
    # .: indicates where Docker should look for this file (in this case, in the command's current directory)

##############################################################################################################

# To build the container with this image:
# 1st Step: create the network
    # docker network create matchub-network
# 2nd Step: build the container:
    # docker run -d --name matchub-web-angular-container --network matchub-network -p 80:80 -v /docker/data/logs:/var/log/nginx matchub-web-angular-image
        # -d: run container in the background, allowed to continue using the terminal 
        # -p: Docker will forward data traffic arriving on port 80 of the host to port 80 of the container
        # explain more about port 80

##############################################################################################################

# Multi-Stage Build
# In this Dockerfile, there is a concatenation of builds:
# 1st Build: build the Angular project with Node.js
    # First step: import the dependencies
    # Second step: build the entire angular project
# 2nd Build: nginx server build

# 1st Build: NODE
# Angular requires a Node.js environment to run, including installing dependencies 
# via npm (Node Package Manager) and executing build and development scripts.
FROM node:20.11.0 as build-stage

# Set ARG to facilitate any changes in the future
ARG PROJECT_PATH=../matchub-web/

# Set the working directory
WORKDIR /node-alpine

# Copy package.json and package-lock.json (or yarn.lock): contain the list of project dependencies
# `package*.json`: filename pattern that starts with `package` and ends with `.json`
COPY ${PROJECT_PATH}package*.json ./

# Install all dependencies
RUN npm install

# Copy the rest of the application code
COPY ${PROJECT_PATH} .

# Build the application
RUN npm run build -- --output-path=./dist/out --configuration production

# 2nd Build: NGINX
# Nginx (pronounced "engine-x")
# Explanation: web server software, delivering files to a web browser that makes the request
# Note: the word "Server" is, by abuse of notation, used to represent two concepts;
    # Server as HARDWARE: physical machine (a computer) designed to process requests
        # and deliver data to other computers on a local network or over the internet
    # Server as SOFTWARE: program that is listening and responding to network requests 
        # (Nginx falls into this category)
FROM nginx:latest as production-stage

# Set ARG to facilitate any changes in the future
ARG PROJECT_PATH=../matchub-web/
# MAJOR: 1 (dependency); MINOR: 0 (feature); PATCH: 0 (bugs)
ARG PROJECT_VERSION=1.0.0

# Set LABEL for description purposes
LABEL org.opencontainers.image.title="MatcHub - Angular Image Application" \
      org.opencontainers.image.version="${PROJECT_VERSION}" \
      org.opencontainers.image.description="This Angular application serves as the frontend for the MatcHub platform, \
      designed to interact seamlessly with the Spring backend. It fully utilizes Angular's framework capabilities, \
      including components, modules, routing, services, and guards. \
      These features are integral for robust data validation and user authentication, \
      ensuring a secure and efficient user experience. \
      The application architecture is optimized for scalability and performance in cloud environments." \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.authors="https://www.linkedin.com/in/tarcidio/" \
      org.opencontainers.image.source="https://github.com/tarcidio/matchub-web" \
      org.opencontainers.image.documentation="https://github.com/tarcidio/matchub-web/blob/main/README.md"

# Do not set to avoid affecting standard directories that nginx uses
# WORKDIR /web

# Copy the build output to replace the default nginx contents.
# Nginx is configured to serve files from the directory `/usr/share/nginx/html`
COPY --from=build-stage /node-alpine/dist/out/browser /usr/share/nginx/html

# COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Define a volume for Nginx logs
VOLUME /var/log/nginx

# Expose port 80
EXPOSE 80

# Run nginx
CMD ["nginx", "-g", "daemon off;"]