# To build this image:
# docker build -f Dockerfile.web -t matchub-web-angular-image .
    # -f: indicates dockerfile name
    # -t: indicates a tag to identify the image
    # .: indicates where Docker should look for this file (in this case, in the command's current directory)

##############################################################################################################

# To build the container with this image:
# 1st Step: create the network
    # docker network create matchub-network
# 2nd Step: build the container:
    # docker run -d --name matchub-web-angular-container --network matchub-network -p 80:80 matchub-web-angular-image
        # -d: run container in the background, allowed to continue using the terminal 
        # -p: Docker will forward data traffic arriving on port 80 of the host to port 80 of the container
        # explain more about port 80

##############################################################################################################

ARG PROJECT_PATH=../matchub/
ARG PROJECT_VERSION=1.0.0

# Multistaging

# Angular CLI e muitas outras ferramentas de desenvolvimento frontend modernas são baseadas em Node.js. Elas requerem um ambiente Node.js para serem executadas, incluindo a instalação de dependências via npm (Node Package Manager) e a execução de scripts de build e desenvolvimento. Usar uma imagem base do Node.js garante que você tenha o ambiente necessário pré-configurado para executar essas operações.
# Stage 1: Build the Angular application
FROM node:20.11.0 as build-stage

# Set the working directory
WORKDIR /node-alpine

# Copy package.json and package-lock.json (or yarn.lock): contêm a lista de dependências do projeto
# `package*.json`: padrão de correspondência de nome de arquivo que começam com `package` e terminam com `.json`
COPY ${PROJECT_PATH}package*.json ./

# Install all dependencies
RUN npm install

# Copy the rest of the application code
COPY ${PROJECT_PATH} .

# Build the application
RUN npm run build -- --output-path=./dist/out --configuration production

# Nginx (lê-se "engine-x")
# Explicação: software de servidor web (também funcionando como proxy reverso, um proxy de email (IMAP/POP3) e um balanceador de carga)
# entregar conteúdo como páginas HTML, arquivos CSS, e imagens para um navegador web que faz a solicitação
# OBS: a palavra "Servidor" é, por abuso de notação, usada para representar dois conceitos;
    # Servidor como HARDWARE: máquina física (um computador) projetada para processar solicitações e entregar dados a outros computadores em uma rede local ou pela internet
    # Servidor como SOFTWARE: programa que está ouvindo e atendendo a solicitações de rede (é nesta categoria que se encontra o Nginx)
# OBS:
    # Proxy Reverso: intermediário entre os clientes da internet e os servidores web que hospedam os sites
    # Proxy de Eemail (IMAP/POP3): intermediário entre os clientes de email e os servidores de email
    # Balanceador de carga: distribui o tráfego de rede vários servidores ou recursos computacionais
# Stage 2: Serve the application with Nginx
FROM nginx:latest as production-stage

LABEL org.opencontainers.image.title="MatcHub - Angular Image Application" \
      org.opencontainers.image.version="${PROJECT_VERSION}" \
      org.opencontainers.image.description="This Angular application serves as the frontend for the MatcHub platform, \
      designed to interact seamlessly with the Spring backend. It fully utilizes Angular's framework capabilities, \
      including components, modules, routing, services, and guards. \
      These features are integral for robust data validation and user authentication, \
      ensuring a secure and efficient user experience. \
      The application architecture is optimized for scalability and performance in cloud environments." \
      org.opencontainers.image.authors="tarcidio.antonio2@gmail.com" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/tarcidio/matchub-app" \
      org.opencontainers.image.documentation="https://github.com/tarcidio/match-hub/blob/main/README.md"

# Não colocar para não afetar sistemas diretórios padrão que o nginx usa
# WORKDIR /web

# Copy the build output to replace the default nginx contents.
# Nginx está configurado para servir arquivos do diretório `/usr/share/nginx/html`
COPY --from=build-stage /node-alpine/dist/out/browser /usr/share/nginx/html

COPY nginx.conf /etc/nginx/nginx.conf
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80
EXPOSE 80

# Run nginx
CMD ["nginx", "-g", "daemon off;"]
                  
                  